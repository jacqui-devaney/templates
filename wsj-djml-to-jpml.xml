<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" encoding="UTF-8" indent="yes"/>

<xsl:key name="srcid" match="image" use="@src-id" />
<xsl:param name="subsection"></xsl:param>
<xsl:param name="region"></xsl:param>
<xsl:param name="issuetype"></xsl:param>

<xsl:template match="/article-doc">
<jpml>
    <p id="type"><xsl:value-of select="@type"/></p>
    <p id="flashline"><xsl:value-of select="@display-name"/></p>
    <p id="pubdate"><xsl:value-of select="@date"/></p>
    <p id="subsection"><xsl:value-of select="$subsection"></xsl:value-of></p>
    <p id="region"><xsl:value-of select="$region"/></p>
    
    <!-- TODO: paid/free flag -->

    <p id="headline"><xsl:call-template name="headline"/></p>
    <p id="subhed"><xsl:value-of select="article/article-body/headline/deck"/></p>
    <p id="byline"><xsl:value-of select="article/article-body/byline"/></p>
    <p id="summary"><xsl:value-of select="summary/summary-body/p"/></p>

    <panel id="summary-image">
        <xsl:apply-templates select="summary"/>
    </panel>
    
    <!-- TODO: grab largest summary image if there are no article images? -->
    <!-- TODO: exclude images referenced in insets? -->
    <!-- TODO: exclude images wrapped in media@type=FLASH -->
    <panel id="article-image">
        <xsl:apply-templates select="article/article-body//image[generate-id(.) = generate-id(key('srcid', @src-id)) and @width &gt; 0 and @height &gt; 0]"/>
    </panel>
    
    <!-- TODO: slideshows? media@type=FLASH and image@slug=slideshow -->
    
    <!-- TODO: images where slug=interactive, need to get media@thumbnail-src too -->
    <panel id="article-graphic">
        <xsl:apply-templates select="zzz"/>
    </panel>
    
    <!-- TODO: media@type=VIDEO -->
    <panel id="article-video">
        <xsl:apply-templates select="zzz"/>
    </panel>
    
    <panel id="article-link">
        <xsl:apply-templates select="zzz"/>
    </panel>
    
        
    <!-- TODO: will we need to merge the SB2/3/4 text with the SB1 media? -->
    <!-- TODO: collapse empty p tags? ignore leading p tags too. -->
    <panel id="body">
        <xsl:apply-templates select="article/article-body"/>
        <!-- We will insert a mark body bug in the last p or tagline element -->
    </panel>
    
    <!-- Barron's will need external links, insets too. -->
    
</jpml>
</xsl:template>

<xsl:template name="headline">
<xsl:choose>
  <xsl:when test="($region=&quot;US&quot; or $region=&quot;XAMLUS&quot;) and summary/alt-summary-body[@destination-type=&quot;THIS-ART&quot; and starts-with(@page,&quot;|Mobile|&quot;)]/headline/main-hed">
    <xsl:value-of select="summary/alt-summary-body[@destination-type=&quot;THIS-ART&quot; and starts-with(@page,&quot;|Mobile|&quot;)]/headline/main-hed" />
  </xsl:when>
  <xsl:when test="($region=&quot;US&quot; or $region=&quot;XAMLUS&quot; or $issuetype=&quot;NOW&quot;) and summary/summary-body/headline/main-hed">
     <xsl:value-of select="summary/summary-body/headline/main-hed" />
  </xsl:when>
  <xsl:otherwise>
     <xsl:value-of select="article/article-body/headline/main-hed" />
  </xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match="p">
    <p>        
        <xsl:if test="@type">
            <xsl:attribute name="class">
                <xsl:value-of select="@type"/>
            </xsl:attribute>
        </xsl:if>
        <xsl:if test="not(preceding-sibling::p[position()=1])">
            <xsl:attribute name="id">body-first-p</xsl:attribute>
        </xsl:if>
        <xsl:if test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
            <xsl:attribute name="id">body-last-p</xsl:attribute>
        </xsl:if>
    <xsl:apply-templates select="node()"/>
    <xsl:if test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
        <mark class="body-bug"/>
    </xsl:if>
    </p>
</xsl:template>

<xsl:template match="byline">
</xsl:template>

<xsl:template match="headline">
</xsl:template>

<xsl:template match="article-body">
    <xsl:apply-templates select="*"/>
</xsl:template>

<!-- Ignore all insets, unless they are "body continuation" insets -->
<!-- TODO: we should still grab article images from insets? -->
<xsl:template match="inset">
    <xsl:if test="@param1 = 'CONTINUATION'">
        <xsl:apply-templates/>
    </xsl:if>
</xsl:template>

<xsl:template match="highlight[@type='BOLD']">
    <strong><xsl:value-of select="."/></strong>
</xsl:template>
<xsl:template match="highlight[@type='ITALIC']">
    <em><xsl:value-of select="."/></em>
</xsl:template>

<xsl:template match="link">
    <xsl:value-of select="."/>
</xsl:template>

<xsl:template match="phrase">
    <xsl:value-of select="."/>
</xsl:template>

<xsl:template match="media">
</xsl:template>

<xsl:template match="break">
    <break/>
</xsl:template>

<xsl:template match="subhed">
    <h2><xsl:value-of select="."/></h2>
</xsl:template> 

<xsl:template match="small-hed">
    <h3><xsl:value-of select="."/></h3>
</xsl:template> 

<xsl:template match="tagline">
    <p>
        <xsl:if test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
            <xsl:attribute name="id">body-last-p</xsl:attribute>
        </xsl:if>
        <cite><xsl:value-of select="."/></cite>
        <xsl:if test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
            <mark class="body-bug"/>
        </xsl:if>
    </p>
</xsl:template> 

<xsl:template match="summary">
    <xsl:apply-templates select="*[self::summary-body or self::alt-summary-body]//image[generate-id(.) = generate-id(key('srcid', @src-id)) and @width &gt; 0 and @height &gt; 0]"/>
</xsl:template>

<xsl:template match="image">
    <image>
        <xsl:attribute name="source">
            <xsl:value-of select="@src-id"/>
        </xsl:attribute>
        <xsl:attribute name="width">
            <xsl:value-of select="@width"/>
        </xsl:attribute>
        <xsl:attribute name="height">
            <xsl:value-of select="@height"/>
        </xsl:attribute>
    </image>
</xsl:template>

<xsl:template match="@*|node()">
  <xsl:copy>
    <xsl:apply-templates select="@*|node()"/>
  </xsl:copy>
</xsl:template>

</xsl:stylesheet>
