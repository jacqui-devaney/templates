<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'"/>
	<xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>

	<xsl:key name="item_by_title" match="item" use="title" />

	<xsl:variable name="type">
		<xsl:choose>
			<xsl:when test="contains(/rss/channel/title, 'ITP')">ITP</xsl:when>
			<xsl:otherwise>NOW</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>

<xsl:template match="/rss">
	<jpml>
		<style src="WHATS_NEWS_COMMON-stylesheet.ejs"/>
		<style>
			<xsl:attribute name="src">WHATS_NEWS_<xsl:value-of select="$type"/>-stylesheet.ejs</xsl:attribute>
		</style>

		<panel class="main">
			<p id="main-header" class="header"><mark id="main-header-mark"/><break/><mark class="stars" /></p>
			<xsl:apply-templates select="channel"/>
		</panel>
	</jpml>
</xsl:template>

<xsl:template match="channel">
	<xsl:choose>
		<xsl:when test="$type = 'ITP'">
			<xsl:apply-templates select="item[generate-id(.)=generate-id(key('item_by_title',title)[1])]" />
		</xsl:when>
		<xsl:otherwise>
			<xsl:apply-templates select="item"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template match="item">
	<panel class="group">
		<xsl:if test="$type = 'ITP'">
			<p class="header"><span><xsl:value-of select="substring-after(title, ': ')"/></span><break/><mark class="stars" /></p>
		</xsl:if>
		<xsl:for-each select="key('item_by_title', title)">
			<p class="item">
				<xsl:if test="$type = 'NOW'">
					<span class="item-title"><xsl:call-template name="linked_text">
						<xsl:with-param name="link"><xsl:value-of select="link"/></xsl:with-param>
						<xsl:with-param name="text"><xsl:value-of select="title"/></xsl:with-param>
					</xsl:call-template></span>
					<break/>
					<mark class="item-before-description"/>
				</xsl:if>
				<span class="item-description"><xsl:call-template name="linked_text">
					<xsl:with-param name="link"><xsl:value-of select="link"/></xsl:with-param>
					<xsl:with-param name="text"><xsl:value-of select="description"/></xsl:with-param>
				</xsl:call-template></span>
				<xsl:if test="string-length(link) > 0">
					<mark>
						<xsl:attribute name="class">item-after-description <xsl:choose>
							<xsl:when test="category = 'FREE'">item-free</xsl:when>
							<xsl:otherwise>item-paid</xsl:otherwise>
						</xsl:choose></xsl:attribute>
					</mark>
				</xsl:if>
			</p>
		</xsl:for-each>
	</panel>
</xsl:template>

<xsl:template name="linked_text">
	<xsl:param name="link"/>
	<xsl:param name="text"/>
	<xsl:choose>
		<xsl:when test="string-length($link) > 0">
			<a class="item-link">
				<xsl:attribute name="href">
					<xsl:call-template name="get_jpml_file">
						<xsl:with-param name="input">
							<xsl:value-of select="$link"/>
							</xsl:with-param>
						</xsl:call-template>
				</xsl:attribute>
				<xsl:value-of select="$text"/>
			</a>
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$text"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="get_jpml_file">
	<xsl:param name="input"/>
	<xsl:call-template name="replace_file_extension">
		<xsl:with-param name="input">
			<xsl:call-template name="get_file_name">
				<xsl:with-param name="input">
					<xsl:value-of select="$input"/>
				</xsl:with-param>
			</xsl:call-template>
		</xsl:with-param>
		<xsl:with-param name="ext" select="'jpml'"/>
	</xsl:call-template>
</xsl:template>

<xsl:template name="get_file_name">
    <xsl:param name="input"/>
    <xsl:choose>
        <xsl:when test="contains($input, '/')">
            <xsl:call-template name="get_file_name">
                <xsl:with-param name="input" select="substring-after($input, '/')"/>
            </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="$input"/>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="replace_file_extension">
    <xsl:param name="input"/>
    <xsl:param name="ext"/>
    <xsl:choose>
        <xsl:when test="contains($input, '.')">
            <xsl:value-of select="substring-before($input, '.')"/>.<xsl:call-template name="replace_file_extension">
                <xsl:with-param name="input" select="substring-after($input, '.')"/>
                <xsl:with-param name="ext" select="$ext"/>
            </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="$ext"/>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

</xsl:stylesheet>