<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" encoding="UTF-8" indent="yes"/>

<xsl:key name="srcid" match="image" use="@src-id" />
<xsl:param name="subsection"></xsl:param>
<xsl:param name="region"></xsl:param>
<xsl:param name="issuetype"></xsl:param>

<xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
<xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />

<xsl:template match="/article-doc">
<jpml>
    <xsl:attribute name="lang">
        <xsl:choose>
            <xsl:when test="@language = 'en-us'">en</xsl:when>
            <xsl:otherwise><xsl:value-of select="@language"/></xsl:otherwise>
        </xsl:choose>
    </xsl:attribute>
    <p id="type"><xsl:value-of select="@type"/></p>
    <p id="flashline"><xsl:value-of select="@display-name"/></p>
    <p id="pubdate"><xsl:value-of select="@date"/></p>
    <p id="subsection"><xsl:value-of select="$subsection"/></p>
    <p id="region"><xsl:value-of select="$region"/></p>
    
    <panel id="metadata">
        <p id="article-manifest" />
        <p id="media-bucket" />
    </panel>

    <!-- TODO: paid/free flag -->

    <p id="headline"><xsl:call-template name="headline"/></p>
    <p id="subhed"><xsl:value-of select="article/article-body/headline/deck"/></p>
    <p id="byline"><xsl:call-template name="article-byline" /></p>
    <p id="summary"><xsl:value-of select="summary/summary-body/p"/></p>

    <panel id="summary-image">
        <xsl:apply-templates select="summary"/>
    </panel>
    
    <!-- TODO: grab largest summary image if there are no article images? -->
    <!-- TODO: exclude images referenced in insets? -->
    <!-- TODO: exclude images wrapped in media@type=FLASH -->
    <!-- REDO: generate-id(.) = generate-id(key('srcid', @src-id)) and -->
    <panel id="article-image">
        <xsl:apply-templates select="article/article-body//image[@width &gt; 0 and @height &gt; 0]"/>
    </panel>
        
    <!-- TODO: will we need to merge the SB2/3/4 text with the SB1 media? -->
    <!-- TODO: collapse empty p tags? ignore leading p tags too. -->
    <panel id="body">
        <xsl:apply-templates select="article/article-body"/>
        <!-- We will insert a mark body bug in the last p or tagline element -->
<xsl:if test="@type=&quot;Deloitte Cio Blog&quot; or @type=&quot;Deloitte Cfo Blog&quot;">
	            <xsl:for-each select="//inset[@param1=&quot;DISCLAIMER&quot; and @style=&quot;OUTSET&quot;]/p">
                <xsl:if test="not(preceding-sibling::p[position()=1])">
                    <p id="deloitte-disclaimer-preamble-p"><mark id="deloitte-disclaimer-preamble-mark" /></p>
                </xsl:if>
                <p class="deloitte-disclaimer">
                    <xsl:value-of select="." />
                </p>
            </xsl:for-each>
        </xsl:if>
		<p>&#xa0;</p>
    </panel>
    
    <!-- Barron's will need external links, insets too. -->
    
</jpml>
</xsl:template>

<xsl:template name="headline">
<xsl:choose>
  <xsl:when test="($region=&quot;US&quot; or $region=&quot;XAMLUS&quot; or $region=&quot;GERMANY&quot;) and summary/alt-summary-body[@destination-type=&quot;THIS-ART&quot; and starts-with(@page,&quot;|Mobile|&quot;)]/headline/main-hed">
    <xsl:value-of select="summary/alt-summary-body[@destination-type=&quot;THIS-ART&quot; and starts-with(@page,&quot;|Mobile|&quot;)]/headline/main-hed" />
  </xsl:when>
  <xsl:when test="($region=&quot;US&quot; or $region=&quot;XAMLUS&quot; or $region=&quot;GERMANY&quot; or $issuetype=&quot;NOW&quot;) and summary/summary-body/headline/main-hed">
     <xsl:value-of select="summary/summary-body/headline/main-hed" />
  </xsl:when>
  <xsl:otherwise>
     <xsl:value-of select="article/article-body/headline/main-hed" />
  </xsl:otherwise>
</xsl:choose>
</xsl:template>

<!-- Bylines looks like this:
    <byline type="SIGNED">By 
        <phrase type="AUTHOR">Emily Chasan</phrase>
        <credit>Senior Editor</credit>
    </byline>
-->
<xsl:template name="article-byline">
    <xsl:for-each select="article/article-body/byline/node()">
        <xsl:choose>
            <xsl:when test="self::phrase[@type = &quot;AUTHOR&quot;]">
                <span class="byline-author"><xsl:value-of select="."/></span>
            </xsl:when>
            <xsl:when test="self::credit">
                <span class="byline-credit"><xsl:value-of select="."/></span>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="."/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:for-each>
</xsl:template>

<xsl:template match="p[@type = &quot;CODA&quot;]" priority="1">
    <xsl:if test="string(.)">
        <p class="blockquote-p"><xsl:apply-templates select="node()"/></p>
    </xsl:if>
</xsl:template>

<xsl:template match="p" priority="0">
    <xsl:if test="string(.)">
        <p>        
            <xsl:if test="@type">
                <xsl:attribute name="class">
                    <xsl:value-of select="@type"/>
                </xsl:attribute>
            </xsl:if>
            <xsl:choose>
                <xsl:when test="not(preceding-sibling::p[string(.) and position()=1])">
                    <xsl:attribute name="id">body-first-p</xsl:attribute>
                </xsl:when>
                <xsl:when test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
                    <xsl:attribute name="id">body-last-p</xsl:attribute>
                </xsl:when>
            </xsl:choose>
        <xsl:apply-templates select="node()"/>
        <xsl:if test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
            <mark class="body-bug"/>
        </xsl:if>
        </p>
    </xsl:if>
</xsl:template>

<xsl:template match="list[@type = &quot;UNORDERED&quot;]">
    <!--panel class="unordered-list"-->
        <xsl:apply-templates select="*"/>
    <!--/panel-->
</xsl:template>

<xsl:template match="list[@type = &quot;ORDERED&quot;]">
    <!--panel class="ordered-list"-->
        <xsl:apply-templates select="*"/>
    <!--/panel-->
</xsl:template>

<xsl:template match="list-item">
    <p class="list-item"><mark><xsl:choose>
        <xsl:when test="../@type = &quot;UNORDERED&quot;">
            <xsl:attribute name="class">list-item-bullet</xsl:attribute>
        </xsl:when>
        <xsl:when test="../@type = &quot;ORDERED&quot;">
            <xsl:attribute name="class">list-item-number</xsl:attribute>
            <xsl:value-of select="position()"/>
            <xsl:text>.</xsl:text>
        </xsl:when>
    </xsl:choose></mark><xsl:text> </xsl:text><xsl:value-of select="."/></p>
</xsl:template>

<!-- We intentionally do not output the byline as part of the article body. -->
<xsl:template match="byline">
</xsl:template>

<xsl:template match="headline">
</xsl:template>

<xsl:template match="article-body">
    <xsl:apply-templates select="*"/>
</xsl:template>

<!-- Ignore all insets, unless they are "body continuation" insets -->
<!-- TODO: we should still grab article images from insets? -->
<xsl:template match="inset">
    <xsl:if test="@param1 = 'CONTINUATION'">
        <xsl:apply-templates/>
    </xsl:if>
</xsl:template>

<xsl:template match="highlight[@type='BOLD']">
    <strong><xsl:value-of select="."/></strong>
</xsl:template>

<xsl:template match="highlight[@type='ITALIC']">
    <em><xsl:value-of select="."/></em>
</xsl:template>

<xsl:template match="link">
    <a>
        <xsl:attribute name="href">
            <xsl:call-template name="tolower">
                <xsl:with-param name="node" select="@type" />
            </xsl:call-template>:<xsl:call-template name="nameloc_by_id">
                <xsl:with-param name="id" select="@linkend" />
            </xsl:call-template>
        </xsl:attribute>
        <xsl:apply-templates select="*|node()"/>
    </a>

</xsl:template>

<xsl:template match="phrase">
    <xsl:value-of select="."/>
</xsl:template>

<xsl:template match="media">
</xsl:template>

<xsl:template match="credit">
    <span class="credit"><xsl:value-of select="."/></span>
</xsl:template>

<xsl:template match="break">
    <break/>
</xsl:template>

<xsl:template match="subhed">
    <h2><xsl:value-of select="."/></h2>
</xsl:template> 

<xsl:template match="small-hed">
    <h3><xsl:value-of select="."/></h3>
</xsl:template> 

<xsl:template match="tagline">
    <p>
        <xsl:if test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
            <xsl:attribute name="id">body-last-p</xsl:attribute>
        </xsl:if>
        <cite><xsl:value-of select="."/></cite>
        <xsl:if test="not(following-sibling::p[position()=last()]) and not(following-sibling::tagline[position()=last()])">
            <mark class="body-bug"/>
        </xsl:if>
    </p>
</xsl:template> 

<xsl:template match="summary">
    <!-- TODO/REDO: generate-id(.) = generate-id(key('srcid', @src-id)) and -->
    <xsl:apply-templates select="*[self::summary-body or self::alt-summary-body]//image[@width &gt; 0 and @height &gt; 0]"/>
</xsl:template>

<xsl:template match="temporary-info">
</xsl:template> 

<xsl:template name="image_src_id">
    <!-- this gets the last path component of a URL, or a filename if it's just a filename, recursively -->
    <xsl:param name="srcid" />
    <xsl:choose>
        <xsl:when test="contains($srcid, '/')">
            <xsl:call-template name="image_src_id">
                <xsl:with-param name="srcid" select="substring-after($srcid, '/')" />
            </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="$srcid" />            
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="nameloc_by_id">
    <xsl:param name="id" />
    <xsl:value-of select="//article//nameloc[@id = $id]/nmlist" />
</xsl:template>

<xsl:template match="image">
    <image>
        <xsl:attribute name="source">
            <xsl:call-template name="image_src_id">
                <xsl:with-param name="srcid" select="@src-id" />
            </xsl:call-template>
        </xsl:attribute>
        <xsl:attribute name="width">
            <xsl:value-of select="@width"/>
        </xsl:attribute>
        <xsl:attribute name="height">
            <xsl:value-of select="@height"/>
        </xsl:attribute>
    </image>
</xsl:template>

<xsl:template match="@*|node()">
  <xsl:copy>
    <xsl:apply-templates select="@*|node()"/>
  </xsl:copy>
</xsl:template>

<xsl:template name="toupper">
  <xsl:param name="node" />
  <xsl:value-of select="translate($node, $smallcase, $uppercase)" />
</xsl:template>

<xsl:template name="tolower">
  <xsl:param name="node" />
  <xsl:value-of select="translate($node, $uppercase, $smallcase)" />
</xsl:template>

</xsl:stylesheet>